#!/usr/bin/python
# -*- coding: utf-8 -*-

__license__="""
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | dani@iniqua.com
  Mario Vilas | mvilas@gmail.com

Golismero project site: http://code.google.com/p/golismero/
Golismero project mail: golismero.project@gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["UrlDisclosure"]

from ...data import identity
from ...resource.url import Url
from ..vulnerability import Vulnerability
from ....net.web_utils import parse_url


#------------------------------------------------------------------------------
class SuspiciousURL(Vulnerability):
    """
    URL disclosure vulnerability.
    """

    vulnerability_type = "information_disclosure/url_suspicious"


    #----------------------------------------------------------------------
    def __init__(self, url, substring, associated_resource):
        """
        Construct a URL disclosure vulneratility

        :param url: URL to manage
        :type url: str

        :param substring: substring with info
        :type substring: str
        """

        # URL
        self.__url = url

        # Sub string
        self.__substr = substring

        self.associated_resource = associated_resource
        self.risk = 0

        # Parent constructor
        super(SuspiciousURL, self).__init__()


    #----------------------------------------------------------------------
    def __str__(self):
        m_url = self.url
        m_substr = self.substring
        m_pos_discovered = m_url.find(m_substr)
        m_prefix = m_url[:m_pos_discovered]
        m_content = m_url[m_pos_discovered: m_pos_discovered + len(m_url)]
        m_suffix = m_url[m_pos_discovered + len(m_substr):] if (m_pos_discovered + len(m_substr)) < len(m_url) else ""

        return "%s[[%s]]%s" % (
            m_prefix,
            m_content,
            m_suffix
        )


    #----------------------------------------------------------------------

    @identity
    def url(self):
        """
        str -- Raw URL
        """
        return self.__url

    @identity
    def substring(self):
        """
        str -- HTTP method
        """
        return self.__substr
