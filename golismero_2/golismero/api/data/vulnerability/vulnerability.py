#!/usr/bin/python
# -*- coding: utf-8 -*-

__license__="""
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | dani@iniqua.com
  Mario Vilas | mvilas@gmail.com

Golismero project site: http://code.google.com/p/golismero/
Golismero project mail: golismero.project@gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["Vulnerability"]

from ..data import Data


#------------------------------------------------------------------------------
class Vulnerability(Data):
    """
    Base class for all vulnerabilities reported by the testing plugins.
    """

    data_type = Data.TYPE_VULNERABILITY
    vulnerability_type = "generic"


    #
    # TODO:
    #
    # We should have different default values for the constructor for each
    # vulnerability class. One easy way of doing it without having to
    # override the constructor is defining class variables with the defaults.
    #
    # Also, the vulnerability_type may be automatically obtained from the
    # module pathname using introspection and a metaclass.
    #


    #----------------------------------------------------------------------
    def __init__(self, impact=0, cve="", cwe="", severity=0, risk=0, references=()):
        """
        Vulnerability.

        :param impact: Impact rating.
        :type impact: int

        :param cve: CVE ID.
        :type cve: str

        :param cwe: CVE ID.
        :type cwe: str

        :param risk: risk of vulnerability
        :type risk: int

        :param severity: Severity rating.
        :type severity: int

        :param references: Reference URLs.
        :type references: list of str
        """
        self.impact = impact
        self.cve = cve
        self.cwe = cwe
        self.severity = severity
        self.risk = risk
        self.references = references

        # Parent constructor
        super(Vulnerability, self).__init__()


    #----------------------------------------------------------------------
    @property
    def associated_resources(self):
        """
        Get a list with resources associated to this vulnerability.

        :return: List with resources.
        :rtype: list
        """
        return self.get_links(Data.TYPE_RESOURCE)


    #----------------------------------------------------------------------
    @property
    def associated_informations(self):
        """
        Get a list with informations associated to this vulnerability.

        :return: List with informations.
        :rtype: list
        """
        return self.get_links(Data.TYPE_INFORMATION)


    #----------------------------------------------------------------------
    def add_resource(self, res):
        """
        Add resource elements associated to a vulnerability.

        :param res: Resource element.
        :type res: Resource
        """
##        if not isinstance(info, Resource):
##            raise TypeError("Expected Resource, got %s instead" % type(res))
        self.add_link(res)


    #----------------------------------------------------------------------
    def add_information(self, info):
        """
        Add information elements associated to a vulnerability.

        :param info: Information element.
        :type info: Information
        """
##        if not isinstance(info, Information):
##            raise TypeError("Expected Information, got %s instead" % type(info))
        self.add_link(info)
